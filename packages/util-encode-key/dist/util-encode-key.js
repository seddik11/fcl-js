var e=require("@onflow/util-invariant"),n=require("@onflow/rlp"),i=new Set([2,3]),t=new Set([1,3]);exports.ECDSA_P256=2,exports.ECDSA_secp256k1=3,exports.SHA2_256=1,exports.SHA3_256=3,exports.encodeKey=function(r,a,o,h){return void 0===h&&(h=1e3),e.invariant("string"==typeof r,"encodeKey(key, curve, hash, weight) -- invalid key (expecting type of string)"),e.invariant(/^[0-9a-z]+$/.test(r),"encodeKey(key, curve, hash, weight) -- invalid key (incorrect format)"),e.invariant("number"==typeof a,"encodeKey(key, curve, hash, weight) -- invalid curve (expecting type of number)"),e.invariant(i.has(a),"encodeKey(key, curve, hash, weight) -- invalid curve (value not included in set of valid curves)"),e.invariant("number"==typeof o,"encodeKey(key, curve, hash, weight) -- invalid hash (expecting typeof number)"),e.invariant(t.has(o),"encodeKey(key, curve, hash, weight) -- invalid hash (value not included in set of valid hashings)"),e.invariant(h>=0&&h<=1e3,"encodeKey(key, curve, hash, weight) -- weight needs to be between (inclusive of) 0 and 1000"),n.encode([Buffer.from(r,"hex"),a,o,h]).toString("hex")};
//# sourceMappingURL=util-encode-key.js.map

!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@onflow/util-invariant"),require("@onflow/rlp")):"function"==typeof define&&define.amd?define(["exports","@onflow/util-invariant","@onflow/rlp"],n):n((e||self).utilEncodeKey={},e.utilInvariant,e.rlp)}(this,function(e,n,i){var t=new Set([2,3]),o=new Set([1,3]);e.ECDSA_P256=2,e.ECDSA_secp256k1=3,e.SHA2_256=1,e.SHA3_256=3,e.encodeKey=function(e,a,r,h){return void 0===h&&(h=1e3),n.invariant("string"==typeof e,"encodeKey(key, curve, hash, weight) -- invalid key (expecting type of string)"),n.invariant(/^[0-9a-z]+$/.test(e),"encodeKey(key, curve, hash, weight) -- invalid key (incorrect format)"),n.invariant("number"==typeof a,"encodeKey(key, curve, hash, weight) -- invalid curve (expecting type of number)"),n.invariant(t.has(a),"encodeKey(key, curve, hash, weight) -- invalid curve (value not included in set of valid curves)"),n.invariant("number"==typeof r,"encodeKey(key, curve, hash, weight) -- invalid hash (expecting typeof number)"),n.invariant(o.has(r),"encodeKey(key, curve, hash, weight) -- invalid hash (value not included in set of valid hashings)"),n.invariant(h>=0&&h<=1e3,"encodeKey(key, curve, hash, weight) -- weight needs to be between (inclusive of) 0 and 1000"),i.encode([Buffer.from(e,"hex"),a,r,h]).toString("hex")}});
//# sourceMappingURL=util-encode-key.umd.js.map

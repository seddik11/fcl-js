{"version":3,"file":"util-encode-key.module.js","sources":["../src/index.js"],"sourcesContent":["import {invariant} from \"@onflow/util-invariant\"\nimport {encode} from \"@onflow/rlp\"\n\n// Curves\nexport const ECDSA_P256 = 2\nexport const ECDSA_secp256k1 = 3\nconst VALID_CURVES = new Set([ECDSA_P256, ECDSA_secp256k1])\n\n// Hashing\nexport const SHA2_256 = 1\nexport const SHA3_256 = 3\nconst VALID_HASHINGS = new Set([SHA2_256, SHA3_256])\n\nexport function encodeKey(key, curve, hash, weight = 1000) {\n  invariant(\n    typeof key === \"string\",\n    \"encodeKey(key, curve, hash, weight) -- invalid key (expecting type of string)\"\n  )\n  invariant(\n    /^[0-9a-z]+$/.test(key),\n    \"encodeKey(key, curve, hash, weight) -- invalid key (incorrect format)\"\n  )\n  invariant(\n    typeof curve === \"number\",\n    \"encodeKey(key, curve, hash, weight) -- invalid curve (expecting type of number)\"\n  )\n  invariant(\n    VALID_CURVES.has(curve),\n    \"encodeKey(key, curve, hash, weight) -- invalid curve (value not included in set of valid curves)\"\n  )\n  invariant(\n    typeof hash === \"number\",\n    \"encodeKey(key, curve, hash, weight) -- invalid hash (expecting typeof number)\"\n  )\n  invariant(\n    VALID_HASHINGS.has(hash),\n    \"encodeKey(key, curve, hash, weight) -- invalid hash (value not included in set of valid hashings)\"\n  )\n  invariant(\n    weight >= 0 && weight <= 1000,\n    \"encodeKey(key, curve, hash, weight) -- weight needs to be between (inclusive of) 0 and 1000\"\n  )\n\n  return encode([Buffer.from(key, \"hex\"), curve, hash, weight]).toString(\"hex\")\n}\n"],"names":["ECDSA_P256","ECDSA_secp256k1","VALID_CURVES","Set","SHA2_256","SHA3_256","VALID_HASHINGS","encodeKey","key","curve","hash","weight","invariant","test","has","encode","Buffer","from","toString"],"mappings":"wFAIaA,IAAAA,EAAa,EACbC,EAAkB,EACzBC,EAAe,IAAIC,IAAI,CAFH,EACK,IAIlBC,EAAW,EACXC,EAAW,EAClBC,EAAiB,IAAIH,IAAI,CAFP,EACA,aAGRI,EAAUC,EAAKC,EAAOC,EAAMC,GA8B1C,gBA9B0CA,IAAAA,EAAS,KACnDC,EACiB,iBAARJ,EACP,iFAEFI,EACE,cAAcC,KAAKL,GACnB,yEAEFI,EACmB,iBAAVH,EACP,mFAEFG,EACEV,EAAaY,IAAIL,GACjB,oGAEFG,EACkB,iBAATF,EACP,iFAEFE,EACEN,EAAeQ,IAAIJ,GACnB,qGAEFE,EACED,GAAU,GAAKA,GAAU,IACzB,+FAGKI,EAAO,CAACC,OAAOC,KAAKT,EAAK,OAAQC,EAAOC,EAAMC,IAASO,SAAS"}
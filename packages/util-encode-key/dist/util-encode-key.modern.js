import{invariant as e}from"@onflow/util-invariant";import{encode as n}from"@onflow/rlp";const i=2,t=3,o=new Set([2,3]),h=1,r=3,a=new Set([1,3]);function c(i,t,h,r=1e3){return e("string"==typeof i,"encodeKey(key, curve, hash, weight) -- invalid key (expecting type of string)"),e(/^[0-9a-z]+$/.test(i),"encodeKey(key, curve, hash, weight) -- invalid key (incorrect format)"),e("number"==typeof t,"encodeKey(key, curve, hash, weight) -- invalid curve (expecting type of number)"),e(o.has(t),"encodeKey(key, curve, hash, weight) -- invalid curve (value not included in set of valid curves)"),e("number"==typeof h,"encodeKey(key, curve, hash, weight) -- invalid hash (expecting typeof number)"),e(a.has(h),"encodeKey(key, curve, hash, weight) -- invalid hash (value not included in set of valid hashings)"),e(r>=0&&r<=1e3,"encodeKey(key, curve, hash, weight) -- weight needs to be between (inclusive of) 0 and 1000"),n([Buffer.from(i,"hex"),t,h,r]).toString("hex")}export{i as ECDSA_P256,t as ECDSA_secp256k1,h as SHA2_256,r as SHA3_256,c as encodeKey};
//# sourceMappingURL=util-encode-key.modern.js.map

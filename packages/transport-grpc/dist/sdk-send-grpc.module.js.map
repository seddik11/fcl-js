{"version":3,"file":"sdk-send-grpc.module.js","sources":["../src/unary.js","../src/send-execute-script.js","../src/send-get-account.js","../src/send-get-block-header.js","../src/send-get-block.js","../src/send-get-collection.js","../src/send-get-events.js","../src/send-get-latest-block.js","../src/send-get-transaction.js","../src/send-get-transaction-status.js","../src/send-ping.js","../src/send-transaction.js","../src/send-get-block-by-id.js","../src/send-get-block-by-height.js","../src/send-grpc.js"],"sourcesContent":["import {invariant} from \"@onflow/util-invariant\"\nimport {grpc} from \"@improbable-eng/grpc-web\"\nimport {NodeHttpTransport} from \"@improbable-eng/grpc-web-node-http-transport\"\n\ngrpc.setDefaultTransport(NodeHttpTransport())\n\nexport async function unary(host, method, request, context) {\n  invariant(context.config, `SDK GRPC Unary Error: context.config must be defined.`)\n  const metadataFromConfig = await context.config().get(\"grpc.metadata\", {})\n  return new Promise((resolve, reject) => {\n    grpc.unary(method, {\n      request: request,\n      host: host,\n      metadata: new grpc.Metadata(metadataFromConfig),\n      onEnd: ({status, statusMessage, message}) => {\n        if (status === grpc.Code.OK) {\n          resolve(message)\n        } else {\n          reject(new Error(statusMessage))\n        }\n      },\n    })\n  })\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {ExecuteScriptAtLatestBlockRequest, ExecuteScriptAtBlockIDRequest, ExecuteScriptAtBlockHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst argumentBuffer = (arg, context) => context.Buffer.from(JSON.stringify(arg), \"utf8\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nasync function sendExecuteScriptAtBlockIDRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new ExecuteScriptAtBlockIDRequest()\n\n  req.setBlockId(hexBuffer(ix.block.id, context))\n\n  const code = context.Buffer.from(ix.message.cadence, \"utf8\")\n  ix.message.arguments.forEach(arg => req.addArguments(argumentBuffer(ix.arguments[arg].asArgument, context)))\n  req.setScript(code)\n\n  const res = await unary(opts.node, AccessAPI.ExecuteScriptAtBlockID, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendExecuteScriptAtBlockHeightRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new ExecuteScriptAtBlockHeightRequest()\n\n  req.setBlockHeight(Number(ix.block.height))\n\n  const code = context.Buffer.from(ix.message.cadence, \"utf8\")\n  ix.message.arguments.forEach(arg => req.addArguments(argumentBuffer(ix.arguments[arg].asArgument, context)))\n  req.setScript(code)\n\n  const res = await unary(opts.node, AccessAPI.ExecuteScriptAtBlockHeight, req, context) \n  \n  return constructResponse(ix, context, res)\n}\n\nasync function sendExecuteScriptAtLatestBlockRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new ExecuteScriptAtLatestBlockRequest()\n  \n  const code = context.Buffer.from(ix.message.cadence, \"utf8\")\n  ix.message.arguments.forEach(arg => req.addArguments(argumentBuffer(ix.arguments[arg].asArgument, context)))\n  req.setScript(code)\n\n  const res = await unary(opts.node, AccessAPI.ExecuteScriptAtLatestBlock, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res)  {\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.encodedData = JSON.parse(context.Buffer.from(res.getValue_asU8()).toString(\"utf8\"))\n\n  return ret\n}\n\nexport async function sendExecuteScript(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Execute Script Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Execute Script Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Execute Script Error: context.Buffer must be defined.`)\n  \n  ix = await ix\n\n  if (ix.block.id) {\n    return await sendExecuteScriptAtBlockIDRequest(ix, context, opts)\n  } else if (ix.block.height) {\n    return await sendExecuteScriptAtBlockHeightRequest(ix, context, opts)\n  } else {\n    return await sendExecuteScriptAtLatestBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetAccountAtLatestBlockRequest, GetAccountAtBlockHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {sansPrefix, withPrefix} from \"@onflow/util-address\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad, context) =>\n  context.Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\n\nconst addressBuffer = (addr, context) => paddedHexBuffer(addr, 8, context)\n\nconst HashAlgorithmNames = {\n  1: \"SHA2_256\",\n  2: \"SHA2_384\",\n  3: \"SHA3_256\",\n  4: \"SHA3_384\",\n  5: \"KMAC128_BLS_BLS12_381\",\n}\n\nconst SignatureAlgorithmNames = {\n  1: \"ECDSA_P256\",\n  2: \"ECDSA_secp256k1\",\n  3: \"BLS_BLS12_381\",\n}\n\nasync function sendGetAccountAtBlockHeightRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetAccountAtBlockHeightRequest()\n  req.setBlockHeight(Number(ix.block.height))\n  req.setAddress(addressBuffer(sansPrefix(ix.account.addr), context))\n\n  const res = await unary(opts.node, AccessAPI.GetAccountAtBlockHeight, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetAccountAtLatestBlockRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetAccountAtLatestBlockRequest()\n  req.setAddress(addressBuffer(sansPrefix(ix.account.addr), context))\n\n  const res = await unary(opts.node, AccessAPI.GetAccountAtLatestBlock, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  const account = res.getAccount()\n\n  let contractsMap;\n  const contracts = (contractsMap = account.getContractsMap()) ? contractsMap.getEntryList().reduce((acc, contract) => ({\n    ...acc,\n    [contract[0]]: context.Buffer.from(contract[1] || new UInt8Array()).toString(\"utf8\")\n  }), {}) : {}\n\n  ret.account = {\n    address: withPrefix(u8ToHex(account.getAddress_asU8(), context)),\n    balance: account.getBalance(),\n    code: context.Buffer.from(account.getCode_asU8() || new UInt8Array()).toString(\"utf8\"),\n    contracts,\n    keys: account.getKeysList().map(publicKey => ({\n      index: publicKey.getIndex(),\n      publicKey: u8ToHex(publicKey.getPublicKey_asU8(), context),\n      signAlgo: publicKey.getSignAlgo(),\n      signAlgoString: SignatureAlgorithmNames[publicKey.getSignAlgo()], // New! Verify this field name for correctness.\n      hashAlgo: publicKey.getHashAlgo(),\n      hashAlgoString: HashAlgorithmNames[publicKey.getHashAlgo()], // New! Verify this field name for correctness.\n      weight: publicKey.getWeight(),\n      sequenceNumber: publicKey.getSequenceNumber(),\n      revoked: publicKey.getRevoked(),\n    })),\n  }\n\n  return ret\n}\n\n\nexport async function sendGetAccount(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Account Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Get Account Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Get Account Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  if (ix.block.height !== null) {\n    return await sendGetAccountAtBlockHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetAccountAtLatestBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetLatestBlockHeaderRequest, GetBlockHeaderByIDRequest, GetBlockHeaderByHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nasync function sendGetBlockHeaderByIDRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetBlockHeaderByIDRequest()\n  req.setId(hexBuffer(ix.block.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockHeaderByID, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockHeaderByHeightRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetBlockHeaderByHeightRequest()\n  req.setHeight(Number(ix.block.height))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockHeaderByHeight, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetLatestBlockHeaderRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetLatestBlockHeaderRequest()\n\n  if (ix.block?.isSealed) {\n    req.setIsSealed(ix.block.isSealed)\n  }\n\n  const res = await unary(opts.node, AccessAPI.GetLatestBlockHeader, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  const blockHeader = res.getBlock()\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.blockHeader = {\n    id: u8ToHex(blockHeader.getId_asU8(), context),\n    parentId: u8ToHex(blockHeader.getParentId_asU8(), context),\n    height: blockHeader.getHeight(),\n    timestamp: blockHeader.getTimestamp().toDate().toISOString(),\n  }\n\n  return ret\n}\n\nexport async function sendGetBlockHeader(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Block Header Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Block Header Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Block Header Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  const interactionHasBlockID = ix.block.id !== null\n  const interactionHasBlockHeight = ix.block.height !== null\n\n  if (interactionHasBlockID) {\n    return await sendGetBlockHeaderByIDRequest(ix, context, opts)\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockHeaderByHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetLatestBlockHeaderRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetBlockByIDRequest, GetBlockByHeightRequest, GetLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nasync function sendGetBlockByIDRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetBlockByIDRequest()\n  req.setId(hexBuffer(ix.block.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByID, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockByHeightRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetBlockByHeightRequest()\n  req.setHeight(Number(ix.block.height))\n    \n  const res = await unary(opts.node, AccessAPI.GetBlockByHeight, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetLatestBlockRequest()\n\n  if (ix.block?.isSealed) {\n    req.setIsSealed(ix.block.isSealed)\n  }\n\n  const res = await unary(opts.node, AccessAPI.GetLatestBlock, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = (block.getSignaturesList()).map(sig => u8ToHex(sig, context))\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8(), context),\n    parentId: u8ToHex(block.getParentId_asU8(), context),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp().toDate().toISOString(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8(), context),\n      signatures: (collectionGuarantee.getSignaturesList()).map(x => u8ToHex(x, context)),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8(), context),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8(), context),\n      executionReceiptSignatures: (blockSeal.getExecutionReceiptSignaturesList()).map(x => u8ToHex(x, context)),\n      resultApprovalSignatures: (blockSeal.getResultApprovalSignaturesList()).map(x => u8ToHex(x, context)),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n\nexport async function sendGetBlock(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Block Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Block Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Block Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  const interactionHasBlockID = ix.block.id !== null\n  const interactionHasBlockHeight = ix.block.height !== null\n\n  if (interactionHasBlockID) {\n    return await sendGetBlockByIDRequest(ix, context, opts)\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockByHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetCollectionByIDRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nexport async function sendGetCollection(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Collection Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Collection Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Collection Error: context.Buffer must be defined.`)\n\n  const unary = opts.unary || defaultUnary\n\n  ix = await ix\n\n  const req = new GetCollectionByIDRequest()\n  req.setId(hexBuffer(ix.collection.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetCollectionByID, req, context)\n\n  const collection = res.getCollection()\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.collection = {\n    id: u8ToHex(collection.getId_asU8(), context),\n    transactionIds: (collection.getTransactionIdsList()).map(x => u8ToHex(x, context))\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetEventsForHeightRangeRequest, GetEventsForBlockIDsRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nasync function sendGetEventsForHeightRangeRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetEventsForHeightRangeRequest()\n  req.setType(ix.events.eventType)\n\n  req.setStartHeight(Number(ix.events.start))\n  req.setEndHeight(Number(ix.events.end))\n\n  const res = await unary(opts.node, AccessAPI.GetEventsForHeightRange, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetEventsForBlockIDsRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetEventsForBlockIDsRequest()\n  req.setType(ix.events.eventType)\n\n  ix.events.blockIds.forEach(id =>\n    req.addBlockIds(hexBuffer(id, context))\n  )\n\n  const res = await unary(opts.node, AccessAPI.GetEventsForBlockIDs, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  const results = res.getResultsList()\n  ret.events = results.reduce((blocks, result) => {\n    const blockId = u8ToHex(result.getBlockId_asU8(), context)\n    const blockHeight = result.getBlockHeight()\n    const blockTimestamp = result.getBlockTimestamp().toDate().toISOString()\n    const events = result.getEventsList()\n    events.forEach(event => {\n      blocks.push({\n        blockId,\n        blockHeight,\n        blockTimestamp,\n        type: event.getType(),\n        transactionId: u8ToHex(event.getTransactionId_asU8(), context),\n        transactionIndex: event.getTransactionIndex(),\n        eventIndex: event.getEventIndex(),\n        payload: JSON.parse(context.Buffer.from(event.getPayload_asU8()).toString(\"utf8\")),\n      })\n    })\n    return blocks\n  }, [])\n\n  return ret\n}\n\nexport async function sendGetEvents(ix, context = {}, opts = {}) {  \n  invariant(opts.node, `SDK Send Get Events Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Events Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Events Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  const interactionContainsBlockHeightRange = ix.events.start !== null \n  const interactionContainsBlockIDsList = Array.isArray(ix.events.blockIds) && ix.events.blockIds.length > 0\n \n  invariant(\n    interactionContainsBlockHeightRange || interactionContainsBlockIDsList,\n    \"SendGetEventsError: Unable to determine which get events request to send. Either a block height range, or block IDs must be specified.\"\n  )\n  \n  if (interactionContainsBlockHeightRange) {\n    return await sendGetEventsForHeightRangeRequest(ix, context, opts)\n  } else {\n    return await sendGetEventsForBlockIDsRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\n\nconst latestBlockDeprecationNotice = () => {\n  console.error(\n    `\n          %c@onflow/send Deprecation Notice\n          ========================\n\n          Operating upon data of the latestBlock field of the interaction object is deprecated and will no longer be recognized in future releases of @onflow/send.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/send/WARNINGS.md#0001-Deprecating-latestBlock-field\n\n          =======================\n        `\n      .replace(/\\n\\s+/g, \"\\n\")\n      .trim(),\n    \"font-weight:bold;font-family:monospace;\"\n  )\n}\n\nexport async function sendGetLatestBlock(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Latest Block Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Latest Block Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Latest Block Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  const req = new GetLatestBlockRequest()\n\n  if (ix.latestBlock && ix.latestBlock.isSealed) {\n    req.setIsSealed(ix.latestBlock.isSealed)\n    latestBlockDeprecationNotice()\n  }\n\n  if (ix.block && ix.block.isSealed) {\n    req.setIsSealed(ix.block.isSealed)\n  }\n\n  const res = await unary(opts.node, AccessAPI.GetLatestBlock, req, context)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8(), context),\n    parentId: u8ToHex(block.getParentId_asU8(), context),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8(), context),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8(), context),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8(), context),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {AccessAPI, GetTransactionRequest} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nexport async function sendGetTransaction(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Transaction Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Transaction Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Transaction Error: context.Buffer must be defined.`)\n  \n  const unary = opts.unary || defaultUnary\n\n  ix = await ix\n\n  const req = new GetTransactionRequest()\n  req.setId(hexBuffer(ix.transaction.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetTransaction, req, context)\n\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  const unwrapKey = key => ({\n    address: u8ToHex(key.getAddress_asU8(), context),\n    keyId: key.getKeyId(),\n    sequenceNumber: key.getSequenceNumber()\n  })\n\n  const unwrapSignature = sig => ({\n    address: u8ToHex(sig.getAddress_asU8(), context),\n    keyId: sig.getKeyId(),\n    signature: u8ToHex(sig.getSignature_asU8(), context)\n  })\n\n  let transaction = res.getTransaction()\n  ret.transaction = {\n      script: context.Buffer.from(transaction.getScript_asU8()).toString(\"utf8\"),\n      args: (transaction.getArgumentsList()).map(arg => JSON.parse(context.Buffer.from(arg).toString(\"utf8\"))),\n      referenceBlockId: u8ToHex(transaction.getReferenceBlockId_asU8(), context),\n      gasLimit: transaction.getGasLimit(),\n      proposalKey: unwrapKey(transaction.getProposalKey()),\n      payer: u8ToHex(transaction.getPayer_asU8(), context),\n      authorizers: (transaction.getAuthorizersList()).map(x => u8ToHex(x, context)),\n      payloadSignatures: (transaction.getPayloadSignaturesList()).map(unwrapSignature),\n      envelopeSignatures: (transaction.getEnvelopeSignaturesList()).map(unwrapSignature)\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {AccessAPI, GetTransactionRequest} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst STATUS_MAP = {\n  0: \"UNKNOWN\",\n  1: \"PENDING\",\n  2: \"FINALIZED\",\n  3: \"EXECUTED\",\n  4: \"SEALED\",\n  5: \"EXPIRED\"\n}\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nexport async function sendGetTransactionStatus(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Transaction Status Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Transaction Status Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Transaction Status Error: context.Buffer must be defined.`)\n\n  const unary = opts.unary || defaultUnary\n\n  ix = await ix\n\n  const req = new GetTransactionRequest()\n  req.setId(hexBuffer(ix.transaction.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetTransactionResult, req, context)\n\n  let events = res.getEventsList()\n\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.transactionStatus = {\n    status: res.getStatus(),\n    statusString: STATUS_MAP[res.getStatus()],\n    statusCode: res.getStatusCode(),\n    errorMessage: res.getErrorMessage(),\n    events: events.map(event => ({\n      type: event.getType(),\n      transactionId: u8ToHex(event.getTransactionId_asU8(), context),\n      transactionIndex: event.getTransactionIndex(),\n      eventIndex: event.getEventIndex(),\n      payload: JSON.parse(context.Buffer.from(event.getPayload_asU8()).toString(\"utf8\")),\n    })),\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {AccessAPI, PingRequest} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nexport async function sendPing(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Ping Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Ping Error: context.response must be defined.`)\n\n  const unary = opts.unary || defaultUnary\n\n  ix = await ix\n\n  const req = new PingRequest()\n\n  const res = await unary(opts.node, AccessAPI.Ping, req, context)\n\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {AccessAPI, Transaction, SendTransactionRequest} from \"@onflow/protobuf\"\nimport {sansPrefix} from \"@onflow/util-address\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad, context) =>\n  context.Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\nconst scriptBuffer = (script, context) => context.Buffer.from(script, \"utf8\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\nconst addressBuffer = (addr, context) => paddedHexBuffer(addr, 8, context)\nconst argumentBuffer = (arg, context) => context.Buffer.from(JSON.stringify(arg), \"utf8\")\n\nexport async function sendTransaction(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Transaction Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Transaction Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Transaction Error: context.Buffer must be defined.`)\n\n  const unary = opts.unary || defaultUnary\n\n  ix = await ix\n\n  const tx = new Transaction()\n  tx.setScript(scriptBuffer(ix.message.cadence, context))\n  tx.setGasLimit(ix.message.computeLimit)\n  tx.setReferenceBlockId(\n    ix.message.refBlock ? hexBuffer(ix.message.refBlock, context) : null\n  )\n  tx.setPayer(addressBuffer(sansPrefix(ix.accounts[ix.payer].addr), context))\n  ix.message.arguments.forEach(arg =>\n    tx.addArguments(argumentBuffer(ix.arguments[arg].asArgument, context))\n  )\n  ix.authorizations\n    .map(tempId => ix.accounts[tempId].addr)\n    .reduce((prev, current) => {\n      return prev.find(item => item === current) ? prev : [...prev, current]\n    }, [])\n    .forEach(addr => tx.addAuthorizers(addressBuffer(sansPrefix(addr), context)))\n\n  const proposalKey = new Transaction.ProposalKey()\n  proposalKey.setAddress(\n    addressBuffer(sansPrefix(ix.accounts[ix.proposer].addr), context)\n  )\n  proposalKey.setKeyId(ix.accounts[ix.proposer].keyId)\n  proposalKey.setSequenceNumber(ix.accounts[ix.proposer].sequenceNum)\n\n  tx.setProposalKey(proposalKey)\n\n  // Apply Non Payer Signatures to Payload Signatures\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (!acct.role.payer && acct.signature != null) {\n        const sig = new Transaction.Signature()\n        sig.setAddress(addressBuffer(sansPrefix(acct.addr), context))\n        sig.setKeyId(acct.keyId)\n        sig.setSignature(hexBuffer(acct.signature, context))\n        tx.addPayloadSignatures(sig)\n      }\n    } catch (error) {\n      console.error(\"Trouble applying payload signature\", {acct, ix})\n      throw error\n    }\n  }\n\n  // Apply Payer Signatures to Envelope Signatures\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (acct.role.payer && acct.signature != null) {\n        const sig = new Transaction.Signature()\n        sig.setAddress(addressBuffer(sansPrefix(acct.addr), context))\n        sig.setKeyId(acct.keyId)\n        sig.setSignature(hexBuffer(acct.signature, context))\n        tx.addEnvelopeSignatures(sig)\n      }\n    } catch (error) {\n      console.error(\"Trouble applying envelope signature\", {acct, ix})\n      throw error\n    }\n  }\n\n  const req = new SendTransactionRequest()\n  req.setTransaction(tx)\n\n  var t1 = Date.now()\n  const res = await unary(opts.node, AccessAPI.SendTransaction, req, context)\n  var t2 = Date.now()\n\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.transactionId = u8ToHex(res.getId_asU8(), context)\n\n  if (typeof window !== \"undefined\") {\n    window.dispatchEvent(\n      new CustomEvent(\"FLOW::TX\", {\n        detail: {txId: ret.transactionId, delta: t2 - t1},\n      })\n    )\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetBlockByIDRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nexport async function sendGetBlockById(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Block By ID Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Block By ID Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Block By ID Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  const req = new GetBlockByIDRequest()\n  req.setId(hexBuffer(ix.block.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByID, req, context)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8(), context),\n    parentId: u8ToHex(block.getParentId_asU8(), context),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8(), context),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8(), context),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8(), context),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetBlockByHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\n\nexport async function sendGetBlockByHeight(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Block By Height Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Block By Height Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Block By Height Error: context.Buffer must be defined.`)\n  \n  ix = await ix\n\n  const req = new GetBlockByHeightRequest()\n  req.setHeight(Number(ix.block.height))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByHeight, req, context)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8(), context),\n    parentId: u8ToHex(block.getParentId_asU8(), context),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8(), context),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8(), context),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8(), context),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {sendTransaction} from \"./send-transaction.js\"\nimport {sendGetTransactionStatus} from \"./send-get-transaction-status.js\"\nimport {sendGetTransaction} from \"./send-get-transaction.js\"\nimport {sendExecuteScript} from \"./send-execute-script.js\"\nimport {sendGetAccount} from \"./send-get-account.js\"\nimport {sendGetEvents} from \"./send-get-events.js\"\nimport {sendGetBlock} from \"./send-get-block.js\"\nimport {sendGetBlockHeader} from \"./send-get-block-header.js\"\nimport {sendGetLatestBlock} from \"./send-get-latest-block.js\"\nimport {sendGetBlockById} from \"./send-get-block-by-id.js\"\nimport {sendGetBlockByHeight} from \"./send-get-block-by-height.js\"\nimport {sendGetCollection} from \"./send-get-collection.js\"\nimport {sendPing} from \"./send-ping.js\"\n\nexport const send = async (ix, context = {}, opts = {}) => {\n  invariant(opts.node, `SDK Send Error: Either opts.node or \"accessNode.api\" in config must be defined.`)\n  invariant(context.ix, `SDK Send Error: context.ix must be defined.`)\n\n  ix = await ix\n\n  // prettier-ignore\n  switch (true) {\n    case context.ix.isTransaction(ix):\n      return opts.sendTransaction ? opts.sendTransaction(ix, context, opts) : sendTransaction(ix, context, opts)\n    case context.ix.isGetTransactionStatus(ix):\n      return opts.sendGetTransactionStatus ? opts.sendGetTransactionStatus(ix, context, opts) : sendGetTransactionStatus(ix, context, opts)\n    case context.ix.isGetTransaction(ix):\n      return opts.sendGetTransaction ? opts.sendGetTransaction(ix, context, opts) : sendGetTransaction(ix, context, opts)\n    case context.ix.isScript(ix):\n      return opts.sendExecuteScript ? opts.sendExecuteScript(ix, context, opts) : sendExecuteScript(ix, context, opts)\n    case context.ix.isGetAccount(ix):\n      return opts.sendGetAccount ? opts.sendGetAccount(ix, context, opts) : sendGetAccount(ix, context, opts)\n    case context.ix.isGetEvents(ix):\n      return opts.sendGetEvents ? opts.sendGetEvents(ix, context, opts) : sendGetEvents(ix, context, opts)\n    case context.ix.isGetLatestBlock(ix):\n      return opts.sendGetLatestBlock ? opts.sendGetLatestBlock(ix, context, opts) : sendGetLatestBlock(ix, context,  opts)\n    case context.ix.isGetBlock(ix):\n      return opts.sendGetBlock ? opts.sendGetBlock(ix, context, opts) : sendGetBlock(ix, context, opts)\n    case context.ix.isGetBlockHeader(ix):\n      return opts.sendGetBlockHeader ? opts.sendGetBlockHeader(ix, context, opts) : sendGetBlockHeader(ix, context, opts)\n    case context.ix.isGetBlockById(ix):\n      return opts.sendGetBlockById ? opts.sendGetBlockById(ix, context, opts) : sendGetBlockById(ix, context, opts)\n    case context.ix.isGetBlockByHeight(ix):\n      return opts.sendGetBlockByHeight ? opts.sendGetBlockByHeight(ix, context, opts) : sendGetBlockByHeight(ix, context, opts)\n    case context.ix.isGetCollection(ix):\n      return opts.sendGetCollection ? opts.sendGetCollection(ix, context, opts) : sendGetCollection(ix, context, opts)\n    case context.ix.isPing(ix):\n      return opts.sendPing ? opts.sendPing(ix, context, opts) : sendPing(ix, context, opts)\n    default:\n      return ix\n  }\n}\n"],"names":["unary","host","method","request","context","invariant","config","get","metadataFromConfig","Promise","resolve","reject","grpc","metadata","Metadata","onEnd","statusMessage","status","Code","OK","message","Error","setDefaultTransport","NodeHttpTransport","sendExecuteScript","ix","opts","node","response","Buffer","block","id","sendExecuteScriptAtBlockIDRequest","height","sendExecuteScriptAtBlockHeightRequest","sendExecuteScriptAtLatestBlockRequest","defaultUnary","req","ExecuteScriptAtLatestBlockRequest","code","from","cadence","arguments","forEach","arg","addArguments","argumentBuffer","asArgument","setScript","AccessAPI","ExecuteScriptAtLatestBlock","res","constructResponse","ExecuteScriptAtBlockHeightRequest","setBlockHeight","Number","ExecuteScriptAtBlockHeight","ExecuteScriptAtBlockIDRequest","setBlockId","hexBuffer","ExecuteScriptAtBlockID","JSON","stringify","hex","ret","tag","encodedData","parse","getValue_asU8","toString","sendGetAccount","sendGetAccountAtBlockHeightRequest","sendGetAccountAtLatestBlockRequest","GetAccountAtLatestBlockRequest","setAddress","addressBuffer","sansPrefix","account","addr","GetAccountAtLatestBlock","GetAccountAtBlockHeightRequest","GetAccountAtBlockHeight","u8ToHex","u8","pad","padStart","paddedHexBuffer","HashAlgorithmNames","SignatureAlgorithmNames","contractsMap","getAccount","contracts","getContractsMap","getEntryList","reduce","acc","contract","UInt8Array","address","withPrefix","getAddress_asU8","balance","getBalance","getCode_asU8","keys","getKeysList","map","publicKey","index","getIndex","getPublicKey_asU8","signAlgo","getSignAlgo","signAlgoString","hashAlgo","getHashAlgo","hashAlgoString","weight","getWeight","sequenceNumber","getSequenceNumber","revoked","getRevoked","sendGetBlockHeader","interactionHasBlockHeight","sendGetBlockHeaderByIDRequest","sendGetBlockHeaderByHeightRequest","sendGetLatestBlockHeaderRequest","GetLatestBlockHeaderRequest","_ix$block","isSealed","setIsSealed","GetLatestBlockHeader","GetBlockHeaderByHeightRequest","setHeight","GetBlockHeaderByHeight","GetBlockHeaderByIDRequest","setId","GetBlockHeaderByID","blockHeader","getBlock","getId_asU8","parentId","getParentId_asU8","getHeight","timestamp","getTimestamp","toDate","toISOString","sendGetBlock","sendGetBlockByIDRequest","sendGetBlockByHeightRequest","sendGetBlockRequest","GetLatestBlockRequest","GetLatestBlock","GetBlockByHeightRequest","GetBlockByHeight","GetBlockByIDRequest","GetBlockByID","collectionGuarantees","getCollectionGuaranteesList","blockSeals","getBlockSealsList","signatures","getSignaturesList","sig","collectionGuarantee","collectionId","getCollectionId_asU8","x","blockSeal","blockId","getBlockId_asU8","executionReceiptId","getExecutionReceiptId_asU8","executionReceiptSignatures","getExecutionReceiptSignaturesList","resultApprovalSignatures","getResultApprovalSignaturesList","sendGetCollection","GetCollectionByIDRequest","collection","GetCollectionByID","getCollection","transactionIds","getTransactionIdsList","sendGetEvents","interactionContainsBlockHeightRange","events","start","interactionContainsBlockIDsList","Array","isArray","blockIds","length","sendGetEventsForHeightRangeRequest","sendGetEventsForBlockIDsRequest","GetEventsForBlockIDsRequest","setType","eventType","addBlockIds","GetEventsForBlockIDs","GetEventsForHeightRangeRequest","setStartHeight","setEndHeight","end","GetEventsForHeightRange","results","getResultsList","blocks","result","blockHeight","getBlockHeight","blockTimestamp","getBlockTimestamp","getEventsList","event","push","type","getType","transactionId","getTransactionId_asU8","transactionIndex","getTransactionIndex","eventIndex","getEventIndex","payload","getPayload_asU8","sendGetLatestBlock","latestBlock","latestBlockDeprecationNotice","console","error","replace","trim","sendGetTransaction","GetTransactionRequest","transaction","GetTransaction","key","unwrapSignature","keyId","getKeyId","signature","getSignature_asU8","getTransaction","script","getScript_asU8","args","getArgumentsList","referenceBlockId","getReferenceBlockId_asU8","gasLimit","getGasLimit","proposalKey","getProposalKey","payer","getPayer_asU8","authorizers","getAuthorizersList","payloadSignatures","getPayloadSignaturesList","envelopeSignatures","getEnvelopeSignaturesList","sendGetTransactionStatus","GetTransactionResult","transactionStatus","getStatus","statusString","STATUS_MAP","statusCode","getStatusCode","errorMessage","getErrorMessage","sendPing","PingRequest","Ping","sendTransaction","tx","Transaction","scriptBuffer","setGasLimit","computeLimit","setReferenceBlockId","refBlock","setPayer","accounts","authorizations","tempId","prev","current","find","item","addAuthorizers","ProposalKey","proposer","setKeyId","setSequenceNumber","sequenceNum","setProposalKey","Object","values","acct","role","Signature","setSignature","addPayloadSignatures","addEnvelopeSignatures","SendTransactionRequest","setTransaction","t1","Date","now","SendTransaction","t2","window","dispatchEvent","CustomEvent","detail","txId","delta","send","isTransaction","isGetTransactionStatus","isGetTransaction","isScript","isGetAccount","isGetEvents","isGetLatestBlock","isGetBlock","isGetBlockHeader","isGetBlockById","sendGetBlockById","isGetBlockByHeight","sendGetBlockByHeight","isGetCollection","isPing"],"mappings":"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"}
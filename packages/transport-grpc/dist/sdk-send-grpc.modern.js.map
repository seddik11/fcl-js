{"version":3,"file":"sdk-send-grpc.modern.js","sources":["../src/unary.js","../src/send-execute-script.js","../src/send-get-account.js","../src/send-get-block-header.js","../src/send-get-block.js","../src/send-get-collection.js","../src/send-get-events.js","../src/send-get-latest-block.js","../src/send-get-transaction.js","../src/send-get-transaction-status.js","../src/send-ping.js","../src/send-transaction.js","../src/send-get-block-by-id.js","../src/send-get-block-by-height.js","../src/send-grpc.js"],"sourcesContent":["import {invariant} from \"@onflow/util-invariant\"\nimport {grpc} from \"@improbable-eng/grpc-web\"\nimport {NodeHttpTransport} from \"@improbable-eng/grpc-web-node-http-transport\"\n\ngrpc.setDefaultTransport(NodeHttpTransport())\n\nexport async function unary(host, method, request, context) {\n  invariant(context.config, `SDK GRPC Unary Error: context.config must be defined.`)\n  const metadataFromConfig = await context.config().get(\"grpc.metadata\", {})\n  return new Promise((resolve, reject) => {\n    grpc.unary(method, {\n      request: request,\n      host: host,\n      metadata: new grpc.Metadata(metadataFromConfig),\n      onEnd: ({status, statusMessage, message}) => {\n        if (status === grpc.Code.OK) {\n          resolve(message)\n        } else {\n          reject(new Error(statusMessage))\n        }\n      },\n    })\n  })\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {ExecuteScriptAtLatestBlockRequest, ExecuteScriptAtBlockIDRequest, ExecuteScriptAtBlockHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst argumentBuffer = (arg, context) => context.Buffer.from(JSON.stringify(arg), \"utf8\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nasync function sendExecuteScriptAtBlockIDRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new ExecuteScriptAtBlockIDRequest()\n\n  req.setBlockId(hexBuffer(ix.block.id, context))\n\n  const code = context.Buffer.from(ix.message.cadence, \"utf8\")\n  ix.message.arguments.forEach(arg => req.addArguments(argumentBuffer(ix.arguments[arg].asArgument, context)))\n  req.setScript(code)\n\n  const res = await unary(opts.node, AccessAPI.ExecuteScriptAtBlockID, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendExecuteScriptAtBlockHeightRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new ExecuteScriptAtBlockHeightRequest()\n\n  req.setBlockHeight(Number(ix.block.height))\n\n  const code = context.Buffer.from(ix.message.cadence, \"utf8\")\n  ix.message.arguments.forEach(arg => req.addArguments(argumentBuffer(ix.arguments[arg].asArgument, context)))\n  req.setScript(code)\n\n  const res = await unary(opts.node, AccessAPI.ExecuteScriptAtBlockHeight, req, context) \n  \n  return constructResponse(ix, context, res)\n}\n\nasync function sendExecuteScriptAtLatestBlockRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new ExecuteScriptAtLatestBlockRequest()\n  \n  const code = context.Buffer.from(ix.message.cadence, \"utf8\")\n  ix.message.arguments.forEach(arg => req.addArguments(argumentBuffer(ix.arguments[arg].asArgument, context)))\n  req.setScript(code)\n\n  const res = await unary(opts.node, AccessAPI.ExecuteScriptAtLatestBlock, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res)  {\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.encodedData = JSON.parse(context.Buffer.from(res.getValue_asU8()).toString(\"utf8\"))\n\n  return ret\n}\n\nexport async function sendExecuteScript(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Execute Script Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Execute Script Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Execute Script Error: context.Buffer must be defined.`)\n  \n  ix = await ix\n\n  if (ix.block.id) {\n    return await sendExecuteScriptAtBlockIDRequest(ix, context, opts)\n  } else if (ix.block.height) {\n    return await sendExecuteScriptAtBlockHeightRequest(ix, context, opts)\n  } else {\n    return await sendExecuteScriptAtLatestBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetAccountAtLatestBlockRequest, GetAccountAtBlockHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {sansPrefix, withPrefix} from \"@onflow/util-address\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad, context) =>\n  context.Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\n\nconst addressBuffer = (addr, context) => paddedHexBuffer(addr, 8, context)\n\nconst HashAlgorithmNames = {\n  1: \"SHA2_256\",\n  2: \"SHA2_384\",\n  3: \"SHA3_256\",\n  4: \"SHA3_384\",\n  5: \"KMAC128_BLS_BLS12_381\",\n}\n\nconst SignatureAlgorithmNames = {\n  1: \"ECDSA_P256\",\n  2: \"ECDSA_secp256k1\",\n  3: \"BLS_BLS12_381\",\n}\n\nasync function sendGetAccountAtBlockHeightRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetAccountAtBlockHeightRequest()\n  req.setBlockHeight(Number(ix.block.height))\n  req.setAddress(addressBuffer(sansPrefix(ix.account.addr), context))\n\n  const res = await unary(opts.node, AccessAPI.GetAccountAtBlockHeight, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetAccountAtLatestBlockRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetAccountAtLatestBlockRequest()\n  req.setAddress(addressBuffer(sansPrefix(ix.account.addr), context))\n\n  const res = await unary(opts.node, AccessAPI.GetAccountAtLatestBlock, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  const account = res.getAccount()\n\n  let contractsMap;\n  const contracts = (contractsMap = account.getContractsMap()) ? contractsMap.getEntryList().reduce((acc, contract) => ({\n    ...acc,\n    [contract[0]]: context.Buffer.from(contract[1] || new UInt8Array()).toString(\"utf8\")\n  }), {}) : {}\n\n  ret.account = {\n    address: withPrefix(u8ToHex(account.getAddress_asU8(), context)),\n    balance: account.getBalance(),\n    code: context.Buffer.from(account.getCode_asU8() || new UInt8Array()).toString(\"utf8\"),\n    contracts,\n    keys: account.getKeysList().map(publicKey => ({\n      index: publicKey.getIndex(),\n      publicKey: u8ToHex(publicKey.getPublicKey_asU8(), context),\n      signAlgo: publicKey.getSignAlgo(),\n      signAlgoString: SignatureAlgorithmNames[publicKey.getSignAlgo()], // New! Verify this field name for correctness.\n      hashAlgo: publicKey.getHashAlgo(),\n      hashAlgoString: HashAlgorithmNames[publicKey.getHashAlgo()], // New! Verify this field name for correctness.\n      weight: publicKey.getWeight(),\n      sequenceNumber: publicKey.getSequenceNumber(),\n      revoked: publicKey.getRevoked(),\n    })),\n  }\n\n  return ret\n}\n\n\nexport async function sendGetAccount(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Account Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Get Account Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Get Account Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  if (ix.block.height !== null) {\n    return await sendGetAccountAtBlockHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetAccountAtLatestBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetLatestBlockHeaderRequest, GetBlockHeaderByIDRequest, GetBlockHeaderByHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nasync function sendGetBlockHeaderByIDRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetBlockHeaderByIDRequest()\n  req.setId(hexBuffer(ix.block.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockHeaderByID, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockHeaderByHeightRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetBlockHeaderByHeightRequest()\n  req.setHeight(Number(ix.block.height))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockHeaderByHeight, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetLatestBlockHeaderRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetLatestBlockHeaderRequest()\n\n  if (ix.block?.isSealed) {\n    req.setIsSealed(ix.block.isSealed)\n  }\n\n  const res = await unary(opts.node, AccessAPI.GetLatestBlockHeader, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  const blockHeader = res.getBlock()\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.blockHeader = {\n    id: u8ToHex(blockHeader.getId_asU8(), context),\n    parentId: u8ToHex(blockHeader.getParentId_asU8(), context),\n    height: blockHeader.getHeight(),\n    timestamp: blockHeader.getTimestamp().toDate().toISOString(),\n  }\n\n  return ret\n}\n\nexport async function sendGetBlockHeader(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Block Header Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Block Header Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Block Header Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  const interactionHasBlockID = ix.block.id !== null\n  const interactionHasBlockHeight = ix.block.height !== null\n\n  if (interactionHasBlockID) {\n    return await sendGetBlockHeaderByIDRequest(ix, context, opts)\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockHeaderByHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetLatestBlockHeaderRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetBlockByIDRequest, GetBlockByHeightRequest, GetLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nasync function sendGetBlockByIDRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetBlockByIDRequest()\n  req.setId(hexBuffer(ix.block.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByID, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockByHeightRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetBlockByHeightRequest()\n  req.setHeight(Number(ix.block.height))\n    \n  const res = await unary(opts.node, AccessAPI.GetBlockByHeight, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetLatestBlockRequest()\n\n  if (ix.block?.isSealed) {\n    req.setIsSealed(ix.block.isSealed)\n  }\n\n  const res = await unary(opts.node, AccessAPI.GetLatestBlock, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = (block.getSignaturesList()).map(sig => u8ToHex(sig, context))\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8(), context),\n    parentId: u8ToHex(block.getParentId_asU8(), context),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp().toDate().toISOString(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8(), context),\n      signatures: (collectionGuarantee.getSignaturesList()).map(x => u8ToHex(x, context)),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8(), context),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8(), context),\n      executionReceiptSignatures: (blockSeal.getExecutionReceiptSignaturesList()).map(x => u8ToHex(x, context)),\n      resultApprovalSignatures: (blockSeal.getResultApprovalSignaturesList()).map(x => u8ToHex(x, context)),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n\nexport async function sendGetBlock(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Block Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Block Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Block Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  const interactionHasBlockID = ix.block.id !== null\n  const interactionHasBlockHeight = ix.block.height !== null\n\n  if (interactionHasBlockID) {\n    return await sendGetBlockByIDRequest(ix, context, opts)\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockByHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetCollectionByIDRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nexport async function sendGetCollection(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Collection Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Collection Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Collection Error: context.Buffer must be defined.`)\n\n  const unary = opts.unary || defaultUnary\n\n  ix = await ix\n\n  const req = new GetCollectionByIDRequest()\n  req.setId(hexBuffer(ix.collection.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetCollectionByID, req, context)\n\n  const collection = res.getCollection()\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.collection = {\n    id: u8ToHex(collection.getId_asU8(), context),\n    transactionIds: (collection.getTransactionIdsList()).map(x => u8ToHex(x, context))\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetEventsForHeightRangeRequest, GetEventsForBlockIDsRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nasync function sendGetEventsForHeightRangeRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetEventsForHeightRangeRequest()\n  req.setType(ix.events.eventType)\n\n  req.setStartHeight(Number(ix.events.start))\n  req.setEndHeight(Number(ix.events.end))\n\n  const res = await unary(opts.node, AccessAPI.GetEventsForHeightRange, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetEventsForBlockIDsRequest(ix, context, opts) {\n  const unary = opts.unary || defaultUnary\n\n  const req = new GetEventsForBlockIDsRequest()\n  req.setType(ix.events.eventType)\n\n  ix.events.blockIds.forEach(id =>\n    req.addBlockIds(hexBuffer(id, context))\n  )\n\n  const res = await unary(opts.node, AccessAPI.GetEventsForBlockIDs, req, context)\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  const results = res.getResultsList()\n  ret.events = results.reduce((blocks, result) => {\n    const blockId = u8ToHex(result.getBlockId_asU8(), context)\n    const blockHeight = result.getBlockHeight()\n    const blockTimestamp = result.getBlockTimestamp().toDate().toISOString()\n    const events = result.getEventsList()\n    events.forEach(event => {\n      blocks.push({\n        blockId,\n        blockHeight,\n        blockTimestamp,\n        type: event.getType(),\n        transactionId: u8ToHex(event.getTransactionId_asU8(), context),\n        transactionIndex: event.getTransactionIndex(),\n        eventIndex: event.getEventIndex(),\n        payload: JSON.parse(context.Buffer.from(event.getPayload_asU8()).toString(\"utf8\")),\n      })\n    })\n    return blocks\n  }, [])\n\n  return ret\n}\n\nexport async function sendGetEvents(ix, context = {}, opts = {}) {  \n  invariant(opts.node, `SDK Send Get Events Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Events Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Events Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  const interactionContainsBlockHeightRange = ix.events.start !== null \n  const interactionContainsBlockIDsList = Array.isArray(ix.events.blockIds) && ix.events.blockIds.length > 0\n \n  invariant(\n    interactionContainsBlockHeightRange || interactionContainsBlockIDsList,\n    \"SendGetEventsError: Unable to determine which get events request to send. Either a block height range, or block IDs must be specified.\"\n  )\n  \n  if (interactionContainsBlockHeightRange) {\n    return await sendGetEventsForHeightRangeRequest(ix, context, opts)\n  } else {\n    return await sendGetEventsForBlockIDsRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetLatestBlockRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\n\nconst latestBlockDeprecationNotice = () => {\n  console.error(\n    `\n          %c@onflow/send Deprecation Notice\n          ========================\n\n          Operating upon data of the latestBlock field of the interaction object is deprecated and will no longer be recognized in future releases of @onflow/send.\n          Find out more here: https://github.com/onflow/flow-js-sdk/blob/master/packages/send/WARNINGS.md#0001-Deprecating-latestBlock-field\n\n          =======================\n        `\n      .replace(/\\n\\s+/g, \"\\n\")\n      .trim(),\n    \"font-weight:bold;font-family:monospace;\"\n  )\n}\n\nexport async function sendGetLatestBlock(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Latest Block Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Latest Block Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Latest Block Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  const req = new GetLatestBlockRequest()\n\n  if (ix.latestBlock && ix.latestBlock.isSealed) {\n    req.setIsSealed(ix.latestBlock.isSealed)\n    latestBlockDeprecationNotice()\n  }\n\n  if (ix.block && ix.block.isSealed) {\n    req.setIsSealed(ix.block.isSealed)\n  }\n\n  const res = await unary(opts.node, AccessAPI.GetLatestBlock, req, context)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8(), context),\n    parentId: u8ToHex(block.getParentId_asU8(), context),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8(), context),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8(), context),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8(), context),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {AccessAPI, GetTransactionRequest} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nexport async function sendGetTransaction(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Transaction Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Transaction Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Transaction Error: context.Buffer must be defined.`)\n  \n  const unary = opts.unary || defaultUnary\n\n  ix = await ix\n\n  const req = new GetTransactionRequest()\n  req.setId(hexBuffer(ix.transaction.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetTransaction, req, context)\n\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  const unwrapKey = key => ({\n    address: u8ToHex(key.getAddress_asU8(), context),\n    keyId: key.getKeyId(),\n    sequenceNumber: key.getSequenceNumber()\n  })\n\n  const unwrapSignature = sig => ({\n    address: u8ToHex(sig.getAddress_asU8(), context),\n    keyId: sig.getKeyId(),\n    signature: u8ToHex(sig.getSignature_asU8(), context)\n  })\n\n  let transaction = res.getTransaction()\n  ret.transaction = {\n      script: context.Buffer.from(transaction.getScript_asU8()).toString(\"utf8\"),\n      args: (transaction.getArgumentsList()).map(arg => JSON.parse(context.Buffer.from(arg).toString(\"utf8\"))),\n      referenceBlockId: u8ToHex(transaction.getReferenceBlockId_asU8(), context),\n      gasLimit: transaction.getGasLimit(),\n      proposalKey: unwrapKey(transaction.getProposalKey()),\n      payer: u8ToHex(transaction.getPayer_asU8(), context),\n      authorizers: (transaction.getAuthorizersList()).map(x => u8ToHex(x, context)),\n      payloadSignatures: (transaction.getPayloadSignaturesList()).map(unwrapSignature),\n      envelopeSignatures: (transaction.getEnvelopeSignaturesList()).map(unwrapSignature)\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {AccessAPI, GetTransactionRequest} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst STATUS_MAP = {\n  0: \"UNKNOWN\",\n  1: \"PENDING\",\n  2: \"FINALIZED\",\n  3: \"EXECUTED\",\n  4: \"SEALED\",\n  5: \"EXPIRED\"\n}\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nexport async function sendGetTransactionStatus(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Transaction Status Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Transaction Status Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Transaction Status Error: context.Buffer must be defined.`)\n\n  const unary = opts.unary || defaultUnary\n\n  ix = await ix\n\n  const req = new GetTransactionRequest()\n  req.setId(hexBuffer(ix.transaction.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetTransactionResult, req, context)\n\n  let events = res.getEventsList()\n\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.transactionStatus = {\n    status: res.getStatus(),\n    statusString: STATUS_MAP[res.getStatus()],\n    statusCode: res.getStatusCode(),\n    errorMessage: res.getErrorMessage(),\n    events: events.map(event => ({\n      type: event.getType(),\n      transactionId: u8ToHex(event.getTransactionId_asU8(), context),\n      transactionIndex: event.getTransactionIndex(),\n      eventIndex: event.getEventIndex(),\n      payload: JSON.parse(context.Buffer.from(event.getPayload_asU8()).toString(\"utf8\")),\n    })),\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {AccessAPI, PingRequest} from \"@onflow/protobuf\"\nimport {unary as defaultUnary} from \"./unary\"\n\nexport async function sendPing(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Ping Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Ping Error: context.response must be defined.`)\n\n  const unary = opts.unary || defaultUnary\n\n  ix = await ix\n\n  const req = new PingRequest()\n\n  const res = await unary(opts.node, AccessAPI.Ping, req, context)\n\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {AccessAPI, Transaction, SendTransactionRequest} from \"@onflow/protobuf\"\nimport {sansPrefix} from \"@onflow/util-address\"\nimport {unary as defaultUnary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst paddedHexBuffer = (hex, pad, context) =>\n  context.Buffer.from(hex.padStart(pad * 2, 0), \"hex\")\nconst scriptBuffer = (script, context) => context.Buffer.from(script, \"utf8\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\nconst addressBuffer = (addr, context) => paddedHexBuffer(addr, 8, context)\nconst argumentBuffer = (arg, context) => context.Buffer.from(JSON.stringify(arg), \"utf8\")\n\nexport async function sendTransaction(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Transaction Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Transaction Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Transaction Error: context.Buffer must be defined.`)\n\n  const unary = opts.unary || defaultUnary\n\n  ix = await ix\n\n  const tx = new Transaction()\n  tx.setScript(scriptBuffer(ix.message.cadence, context))\n  tx.setGasLimit(ix.message.computeLimit)\n  tx.setReferenceBlockId(\n    ix.message.refBlock ? hexBuffer(ix.message.refBlock, context) : null\n  )\n  tx.setPayer(addressBuffer(sansPrefix(ix.accounts[ix.payer].addr), context))\n  ix.message.arguments.forEach(arg =>\n    tx.addArguments(argumentBuffer(ix.arguments[arg].asArgument, context))\n  )\n  ix.authorizations\n    .map(tempId => ix.accounts[tempId].addr)\n    .reduce((prev, current) => {\n      return prev.find(item => item === current) ? prev : [...prev, current]\n    }, [])\n    .forEach(addr => tx.addAuthorizers(addressBuffer(sansPrefix(addr), context)))\n\n  const proposalKey = new Transaction.ProposalKey()\n  proposalKey.setAddress(\n    addressBuffer(sansPrefix(ix.accounts[ix.proposer].addr), context)\n  )\n  proposalKey.setKeyId(ix.accounts[ix.proposer].keyId)\n  proposalKey.setSequenceNumber(ix.accounts[ix.proposer].sequenceNum)\n\n  tx.setProposalKey(proposalKey)\n\n  // Apply Non Payer Signatures to Payload Signatures\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (!acct.role.payer && acct.signature != null) {\n        const sig = new Transaction.Signature()\n        sig.setAddress(addressBuffer(sansPrefix(acct.addr), context))\n        sig.setKeyId(acct.keyId)\n        sig.setSignature(hexBuffer(acct.signature, context))\n        tx.addPayloadSignatures(sig)\n      }\n    } catch (error) {\n      console.error(\"Trouble applying payload signature\", {acct, ix})\n      throw error\n    }\n  }\n\n  // Apply Payer Signatures to Envelope Signatures\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (acct.role.payer && acct.signature != null) {\n        const sig = new Transaction.Signature()\n        sig.setAddress(addressBuffer(sansPrefix(acct.addr), context))\n        sig.setKeyId(acct.keyId)\n        sig.setSignature(hexBuffer(acct.signature, context))\n        tx.addEnvelopeSignatures(sig)\n      }\n    } catch (error) {\n      console.error(\"Trouble applying envelope signature\", {acct, ix})\n      throw error\n    }\n  }\n\n  const req = new SendTransactionRequest()\n  req.setTransaction(tx)\n\n  var t1 = Date.now()\n  const res = await unary(opts.node, AccessAPI.SendTransaction, req, context)\n  var t2 = Date.now()\n\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.transactionId = u8ToHex(res.getId_asU8(), context)\n\n  if (typeof window !== \"undefined\") {\n    window.dispatchEvent(\n      new CustomEvent(\"FLOW::TX\", {\n        detail: {txId: ret.transactionId, delta: t2 - t1},\n      })\n    )\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetBlockByIDRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\nconst hexBuffer = (hex, context) => context.Buffer.from(hex, \"hex\")\n\nexport async function sendGetBlockById(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Block By ID Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Block By ID Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Block By ID Error: context.Buffer must be defined.`)\n\n  ix = await ix\n\n  const req = new GetBlockByIDRequest()\n  req.setId(hexBuffer(ix.block.id, context))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByID, req, context)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8(), context),\n    parentId: u8ToHex(block.getParentId_asU8(), context),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8(), context),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8(), context),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8(), context),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {GetBlockByHeightRequest, AccessAPI} from \"@onflow/protobuf\"\nimport {unary} from \"./unary\"\n\nconst u8ToHex = (u8, context) => context.Buffer.from(u8).toString(\"hex\")\n\nexport async function sendGetBlockByHeight(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Block By Height Error: opts.node must be defined.`)\n  invariant(context.response, `SDK Send Get Block By Height Error: context.response must be defined.`)\n  invariant(context.Buffer, `SDK Send Get Block By Height Error: context.Buffer must be defined.`)\n  \n  ix = await ix\n\n  const req = new GetBlockByHeightRequest()\n  req.setHeight(Number(ix.block.height))\n\n  const res = await unary(opts.node, AccessAPI.GetBlockByHeight, req, context)\n\n  const block = res.getBlock()\n\n  const collectionGuarantees = block.getCollectionGuaranteesList()\n  const blockSeals = block.getBlockSealsList()\n  const signatures = block.getSignaturesList()\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: u8ToHex(block.getId_asU8(), context),\n    parentId: u8ToHex(block.getParentId_asU8(), context),\n    height: block.getHeight(),\n    timestamp: block.getTimestamp(),\n    collectionGuarantees: collectionGuarantees.map(collectionGuarantee => ({\n      collectionId: u8ToHex(collectionGuarantee.getCollectionId_asU8(), context),\n      signatures: collectionGuarantee.getSignaturesList(),\n    })),\n    blockSeals: blockSeals.map(blockSeal => ({\n      blockId: u8ToHex(blockSeal.getBlockId_asU8(), context),\n      executionReceiptId: u8ToHex(blockSeal.getExecutionReceiptId_asU8(), context),\n      executionReceiptSignatures: blockSeal.getExecutionReceiptSignaturesList(),\n      resultApprovalSignatures: blockSeal.getResultApprovalSignaturesList(),\n    })),\n    signatures: signatures,\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {sendTransaction} from \"./send-transaction.js\"\nimport {sendGetTransactionStatus} from \"./send-get-transaction-status.js\"\nimport {sendGetTransaction} from \"./send-get-transaction.js\"\nimport {sendExecuteScript} from \"./send-execute-script.js\"\nimport {sendGetAccount} from \"./send-get-account.js\"\nimport {sendGetEvents} from \"./send-get-events.js\"\nimport {sendGetBlock} from \"./send-get-block.js\"\nimport {sendGetBlockHeader} from \"./send-get-block-header.js\"\nimport {sendGetLatestBlock} from \"./send-get-latest-block.js\"\nimport {sendGetBlockById} from \"./send-get-block-by-id.js\"\nimport {sendGetBlockByHeight} from \"./send-get-block-by-height.js\"\nimport {sendGetCollection} from \"./send-get-collection.js\"\nimport {sendPing} from \"./send-ping.js\"\n\nexport const send = async (ix, context = {}, opts = {}) => {\n  invariant(opts.node, `SDK Send Error: Either opts.node or \"accessNode.api\" in config must be defined.`)\n  invariant(context.ix, `SDK Send Error: context.ix must be defined.`)\n\n  ix = await ix\n\n  // prettier-ignore\n  switch (true) {\n    case context.ix.isTransaction(ix):\n      return opts.sendTransaction ? opts.sendTransaction(ix, context, opts) : sendTransaction(ix, context, opts)\n    case context.ix.isGetTransactionStatus(ix):\n      return opts.sendGetTransactionStatus ? opts.sendGetTransactionStatus(ix, context, opts) : sendGetTransactionStatus(ix, context, opts)\n    case context.ix.isGetTransaction(ix):\n      return opts.sendGetTransaction ? opts.sendGetTransaction(ix, context, opts) : sendGetTransaction(ix, context, opts)\n    case context.ix.isScript(ix):\n      return opts.sendExecuteScript ? opts.sendExecuteScript(ix, context, opts) : sendExecuteScript(ix, context, opts)\n    case context.ix.isGetAccount(ix):\n      return opts.sendGetAccount ? opts.sendGetAccount(ix, context, opts) : sendGetAccount(ix, context, opts)\n    case context.ix.isGetEvents(ix):\n      return opts.sendGetEvents ? opts.sendGetEvents(ix, context, opts) : sendGetEvents(ix, context, opts)\n    case context.ix.isGetLatestBlock(ix):\n      return opts.sendGetLatestBlock ? opts.sendGetLatestBlock(ix, context, opts) : sendGetLatestBlock(ix, context,  opts)\n    case context.ix.isGetBlock(ix):\n      return opts.sendGetBlock ? opts.sendGetBlock(ix, context, opts) : sendGetBlock(ix, context, opts)\n    case context.ix.isGetBlockHeader(ix):\n      return opts.sendGetBlockHeader ? opts.sendGetBlockHeader(ix, context, opts) : sendGetBlockHeader(ix, context, opts)\n    case context.ix.isGetBlockById(ix):\n      return opts.sendGetBlockById ? opts.sendGetBlockById(ix, context, opts) : sendGetBlockById(ix, context, opts)\n    case context.ix.isGetBlockByHeight(ix):\n      return opts.sendGetBlockByHeight ? opts.sendGetBlockByHeight(ix, context, opts) : sendGetBlockByHeight(ix, context, opts)\n    case context.ix.isGetCollection(ix):\n      return opts.sendGetCollection ? opts.sendGetCollection(ix, context, opts) : sendGetCollection(ix, context, opts)\n    case context.ix.isPing(ix):\n      return opts.sendPing ? opts.sendPing(ix, context, opts) : sendPing(ix, context, opts)\n    default:\n      return ix\n  }\n}\n"],"names":["unary","host","method","request","context","invariant","config","metadataFromConfig","get","Promise","resolve","reject","grpc","metadata","Metadata","onEnd","status","statusMessage","message","Code","OK","Error","setDefaultTransport","NodeHttpTransport","argumentBuffer","arg","Buffer","from","JSON","stringify","constructResponse","ix","res","ret","response","tag","encodedData","parse","getValue_asU8","toString","sendExecuteScript","opts","node","block","id","async","defaultUnary","req","ExecuteScriptAtBlockIDRequest","setBlockId","hex","hexBuffer","code","cadence","arguments","forEach","addArguments","asArgument","setScript","AccessAPI","ExecuteScriptAtBlockID","sendExecuteScriptAtBlockIDRequest","height","ExecuteScriptAtBlockHeightRequest","setBlockHeight","Number","ExecuteScriptAtBlockHeight","sendExecuteScriptAtBlockHeightRequest","ExecuteScriptAtLatestBlockRequest","ExecuteScriptAtLatestBlock","sendExecuteScriptAtLatestBlockRequest","u8ToHex","u8","addressBuffer","addr","pad","padStart","paddedHexBuffer","HashAlgorithmNames","SignatureAlgorithmNames","account","getAccount","contractsMap","contracts","getContractsMap","getEntryList","reduce","acc","contract","UInt8Array","address","withPrefix","getAddress_asU8","balance","getBalance","getCode_asU8","keys","getKeysList","map","publicKey","index","getIndex","getPublicKey_asU8","signAlgo","getSignAlgo","signAlgoString","hashAlgo","getHashAlgo","hashAlgoString","weight","getWeight","sequenceNumber","getSequenceNumber","revoked","getRevoked","sendGetAccount","GetAccountAtBlockHeightRequest","setAddress","sansPrefix","GetAccountAtBlockHeight","sendGetAccountAtBlockHeightRequest","GetAccountAtLatestBlockRequest","GetAccountAtLatestBlock","sendGetAccountAtLatestBlockRequest","blockHeader","getBlock","getId_asU8","parentId","getParentId_asU8","getHeight","timestamp","getTimestamp","toDate","toISOString","sendGetBlockHeader","interactionHasBlockHeight","GetBlockHeaderByIDRequest","setId","GetBlockHeaderByID","sendGetBlockHeaderByIDRequest","GetBlockHeaderByHeightRequest","setHeight","GetBlockHeaderByHeight","sendGetBlockHeaderByHeightRequest","GetLatestBlockHeaderRequest","_ix$block","isSealed","setIsSealed","GetLatestBlockHeader","sendGetLatestBlockHeaderRequest","collectionGuarantees","getCollectionGuaranteesList","blockSeals","getBlockSealsList","signatures","getSignaturesList","sig","collectionGuarantee","collectionId","getCollectionId_asU8","x","blockSeal","blockId","getBlockId_asU8","executionReceiptId","getExecutionReceiptId_asU8","executionReceiptSignatures","getExecutionReceiptSignaturesList","resultApprovalSignatures","getResultApprovalSignaturesList","sendGetBlock","GetBlockByIDRequest","GetBlockByID","sendGetBlockByIDRequest","GetBlockByHeightRequest","GetBlockByHeight","sendGetBlockByHeightRequest","GetLatestBlockRequest","GetLatestBlock","sendGetBlockRequest","sendGetCollection","GetCollectionByIDRequest","collection","GetCollectionByID","getCollection","transactionIds","getTransactionIdsList","results","getResultsList","events","blocks","result","blockHeight","getBlockHeight","blockTimestamp","getBlockTimestamp","getEventsList","event","push","type","getType","transactionId","getTransactionId_asU8","transactionIndex","getTransactionIndex","eventIndex","getEventIndex","payload","getPayload_asU8","sendGetEvents","interactionContainsBlockHeightRange","start","interactionContainsBlockIDsList","Array","isArray","blockIds","length","GetEventsForHeightRangeRequest","setType","eventType","setStartHeight","setEndHeight","end","GetEventsForHeightRange","sendGetEventsForHeightRangeRequest","GetEventsForBlockIDsRequest","addBlockIds","GetEventsForBlockIDs","sendGetEventsForBlockIDsRequest","sendGetLatestBlock","latestBlock","console","error","replace","trim","sendGetTransaction","GetTransactionRequest","transaction","GetTransaction","unwrapSignature","keyId","getKeyId","signature","getSignature_asU8","getTransaction","key","script","getScript_asU8","args","getArgumentsList","referenceBlockId","getReferenceBlockId_asU8","gasLimit","getGasLimit","proposalKey","getProposalKey","payer","getPayer_asU8","authorizers","getAuthorizersList","payloadSignatures","getPayloadSignaturesList","envelopeSignatures","getEnvelopeSignaturesList","STATUS_MAP","sendGetTransactionStatus","GetTransactionResult","transactionStatus","getStatus","statusString","statusCode","getStatusCode","errorMessage","getErrorMessage","sendPing","PingRequest","Ping","sendTransaction","tx","Transaction","scriptBuffer","setGasLimit","computeLimit","setReferenceBlockId","refBlock","setPayer","accounts","authorizations","tempId","prev","current","find","item","addAuthorizers","ProposalKey","proposer","setKeyId","setSequenceNumber","sequenceNum","setProposalKey","acct","Object","values","role","Signature","setSignature","addPayloadSignatures","addEnvelopeSignatures","SendTransactionRequest","setTransaction","t1","Date","now","SendTransaction","t2","window","dispatchEvent","CustomEvent","detail","txId","delta","send","isTransaction","isGetTransactionStatus","isGetTransaction","isScript","isGetAccount","isGetEvents","isGetLatestBlock","isGetBlock","isGetBlockHeader","isGetBlockById","sendGetBlockById","isGetBlockByHeight","sendGetBlockByHeight","isGetCollection","isPing"],"mappings":"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"}